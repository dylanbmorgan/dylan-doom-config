#+title: Doom Emacs Literate Config
#+author: Dylan Morgan
#+email: dbmorgan98@gmail.com
#+export_file_name: ./README.org
#+property: header-args :tangle config.el
#+startup: content

* Table of Contents :toc:
- [[#introduction][Introduction]]
  - [[#installation-instructions][Installation Instructions]]
- [[#setup][Setup]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#buffers][Buffers]]
  - [[#chatgpt][ChatGPT]]
  - [[#delays][Delays]]
  - [[#ellama][Ellama]]
  - [[#file-types][File types]]
  - [[#general][General]]
  - [[#gptel][gptel]]
  - [[#lines][Lines]]
  - [[#personal-information][Personal Information]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
  - [[#tramp][Tramp]]
  - [[#web][Web]]
  - [[#windows][Windows]]
- [[#appearance][Appearance]]
  - [[#fonts][Fonts]]
  - [[#minimap][Minimap]]
  - [[#modeline][Modeline]]
  - [[#splash-screen][Splash Screen]]
  - [[#theme][Theme]]
- [[#languages][Languages]]
  - [[#general-1][General]]
  - [[#docker][Docker]]
  - [[#magit][Magit]]
  - [[#bash][Bash]]
  - [[#fortran][Fortran]]
  - [[#julia][Julia]]
  - [[#latex][LaTeX]]
  - [[#lsp][LSP]]
  - [[#markdown][Markdown]]
  - [[#python][Python]]
  - [[#rust][Rust]]
- [[#org-mode][Org-mode]]
  - [[#auto-tangle][Auto Tangle]]
  - [[#agenda][Agenda]]
  - [[#babel][Babel]]
  - [[#capture][Capture]]
  - [[#exporting][Exporting]]
  - [[#file-conversions][File Conversions]]
  - [[#file-headers][File Headers]]
  - [[#general-2][General]]
  - [[#headings][Headings]]
  - [[#images][Images]]
  - [[#keybindings][Keybindings]]
  - [[#latex-fragments][LaTeX Fragments]]
  - [[#presentations][Presentations]]
  - [[#prettification][Prettification]]
  - [[#preview][Preview]]
  - [[#roam][Roam]]
  - [[#snippet-helpers][Snippet Helpers]]
  - [[#src-blocks][SRC Blocks]]
  - [[#table-of-contents][Table of Contents]]
  - [[#todos]['TODO's]]
- [[#shells][Shells]]
  - [[#vterm][vterm]]
  - [[#eshell][eshell]]
  - [[#prompt][Prompt]]
- [[#help][Help]]

*** lsp-ui
Configure lsp-ui settings

#+begin_src emacs-lisp
(after! lsp-ui
  (setq lsp-ui-sideline-enable t
        ;; lsp-ui-sideline-mode 1
        lsp-ui-sideline-delay 1
        lsp-ui-sideline-show-symbol t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-update-mode 'point
        lsp-ui-peek-enable t
        lsp-ui-peek-show-directory t
        lsp-ui-doc-enable t
        ;; lsp-ui-doc-frame-mode t ; This breaks 'q' for some reason
        lsp-ui-doc-delay 1
        lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-show-with-mouse t
        lsp-ui-doc-header t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-max-height 25
        lsp-ui-doc-use-webkit t
        lsp-ui-imenu-enable t
        lsp-ui-imenu-kind-position 'left
        lsp-ui-imenu-buffer-position 'right
        lsp-ui-imenu-window-width 35
        lsp-ui-imenu-auto-refresh t
        lsp-ui-imenu-auto-refresh-delay 1.0)

  (map! :map lsp-ui-mode-map "C-," #'lsp-ui-doc-focus-frame)
  (map! :map lsp-ui-mode-map "C-;" #'lsp-ui-sideline-execute-code-action))

(map! :after lsp-mode
      :map lsp-mode-map
      :leader
      :prefix ("#" . "custom")
      :prefix ("# l" . "lsp")
      :desc "open imenu"
      "i" #'lsp-ui-imenu
      "I" #'lsp-ui-imenu--refresh)
#+end_src

*** TODO DAP
Enable the DAP debugger

#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")

      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src

** Markdown
*** Github API rate limit
Github has a rate limit, limiting how long grip-mode will work for. The following should get around this. This also uses a github authentication token and parses it from a file stored in this directory so it doesn't get made public when I publish this to github.

#+begin_src emacs-lisp
(after! grip-mode
  (setq grip-github-user "grip-github-user")
  (setq grip-github-password (substring
                              (with-temp-buffer
                                (insert-file-contents "~/.doom.d/grip_pw.txt")
                                (buffer-string)) 0 -1)))
#+end_src

*** Line Wrapping
Use visual line wrapping

#+begin_src emacs-lisp
(add-hook! (gfm-mode markdown-mode) #'visual-line-mode #'turn-off-auto-fill)
#+end_src

*** Live Preview
Automatically open live preview when opening a markdown file

#+begin_src emacs-lisp
(after! markdown-mode
  ;; (add-hook! 'markdown-mode-hook #'grip-mode)
  (setq grip-sleep-time 2
        grip-preview-use-webkit t
        grip-binary-path "~/.local/bin/grip"))
#+end_src

*** Markdown Style Customisation
Mirror the style that markdown renders in

#+begin_src emacs-lisp
(custom-set-faces!
  '(markdown-header-face-1 :height 1.25 :weight extra-bold :inherit markdown-header-face)
  '(markdown-header-face-2 :height 1.15 :weight bold       :inherit markdown-header-face)
  '(markdown-header-face-3 :height 1.08 :weight bold       :inherit markdown-header-face)
  '(markdown-header-face-4 :height 1.00 :weight bold       :inherit markdown-header-face)
  '(markdown-header-face-5 :height 0.90 :weight bold       :inherit markdown-header-face)
  '(markdown-header-face-6 :height 0.75 :weight extra-bold :inherit markdown-header-face))
#+end_src
*** Obsidian

#+begin_src emacs-lisp
;; (use-package! obsidian
;;   :ensure t
;;   :demand t
;;   :custom
;;   ;; This directory will be used for `obsidian-capture' if set.
;;   (obsidian-inbox-directory "inbox")
;;   ;; Create missing files in inbox? - when clicking on a wiki link
;;   ;; t: in inbox, nil: next to the file with the link
;;   ;; default: t
;;   ;(obsidian-wiki-link-create-file-in-inbox nil)
;;   ;; The directory for daily notes (file name is YYYY-MM-DD.md)
;;   (obsidian-daily-notes-directory "daily_notes")
;;   ;; Directory of note templates, unset (nil) by default
;;   ;(obsidian-templates-directory "Templates")
;;   ;; Daily Note template name - requires a template directory. Default: Daily Note Template.md
;;   ;(setq obsidian-daily-note-template "Daily Note Template.md")
;;   :config
;;   (obsidian-specify-path "~/Documents/obsidian/")
;;   ;; Activate detection of Obsidian vault
;;   (global-obsidian-mode t)
;;   (map! :map obsidian-mode-map
;;         :localleader
;;         :prefix ("O" . "Obsidian")
;;         ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
;;         :desc "follow link" "o" #'obsidian-follow-link-at-point
;;         ;; Jump to backlinks
;;         :desc "backlink jump" "b" #'obsidian-backlink-jump
;;         :desc "insert link" "l" #'obsidian-insert-wikilink
;;         ;; If you prefer you can use `obsidian-insert-link'
;;         :desc "insert wikilink" "w" #'obsidian-insert-wikilink
;;         ;; Open a note
;;         :desc "jump" "j" #'obsidian-jump
;;         ;; Capture a new note in the inbox
;;         :desc "capture" "c" #'obsidian-capture
;;         ;; Create a daily note
;;         :desc "daily note" #'obsidian-daily-note)
#+end_src

** Python
Disable prettify-symbols in python modes

#+begin_src emacs-lisp
(after! python
  (prettify-symbols-mode -1))
#+end_src

*** Formatters and Linters
**** Black

#+begin_src emacs-lisp
(use-package! python-black
  :after python
  :config
  (add-hook! 'python-mode-hook #'python-black-on-save-mode)
  (map! :map python-mode-map
        :localleader
        :prefix ("b" . "black")
        :desc "blacken buffer" "b" #'python-black-buffer
        :desc "blacken region" "r" #'python-black-region
        :desc "blacken statement" "s" #'python-black-statement))

(setq-hook! 'python-mode-hook +format-with-lsp nil)
#+end_src

**** Ruff

#+begin_src emacs-lisp
;; (use-package! lsp-mode
;;   :hook (python-mode . lsp-deferred)
;;   ;; :commands lsp-deferred
;;   :custom
;;   (lsp-ruff-lsp-ruff-path ["usr/bin/ruff server"])
;;   (lsp-ruff-lsp-ruff-args ["â€“-config /home/dylanmorgan/.config/ruff/ruff.toml" "--preview"])
;;   ;; (lsp-ruff-lsp-python-path "python")
;;   (lsp-ruff-lsp-advertize-fix-all t)
;;   (lsp-ruff-lsp-advertize-organize-imports t)
;;   (lsp-ruff-lsp-log-level "info")
;;   (lsp-ruff-lsp-show-notifications "onError"))

;; TODO when ruff formatting leaves alpha dev
;; (after! python
  ;; (setf (alist-get 'ruff apheleia-formatters) '("ruff format --config ~/.config/ruff/ruff.toml --target-version py39 -q"
  ;;                                               (eval (when buffer-file-name
  ;;                                                       (concat "--stdin-filename=" buffer-file-name)))
  ;;                                               "-"))
  ;; (setf (alist-get 'python-mode apheleia-mode-alist) '(ruff))
  ;; (add-hook! 'before-save-hook #'format-with-lsp t)
  ;; (add-hook! 'before-save-hook #'lsp-organize-imports))
#+end_src

Also add ruff to flycheck

#+begin_src emacs-lisp
;; (after! flycheck
;;   ;; (require 'flycheck)

;;   (flycheck-define-checker python-ruff
;;     "A Python syntax and style checker using the ruff utility.
;;   To override the path to the ruff executable, set
;;   `flycheck-python-ruff-executable'.
;;   See URL `http://pypi.python.org/pypi/ruff'."

;;     :command ("ruff format --config /home/dylanmorgan/.config/ruff/ruff.toml --target-version py312 -q"
;;               (eval (when buffer-file-name
;;                       (concat "--stdin-filename=" buffer-file-name)))
;;               "-")
;;     :standard-input t
;;     :error-filter (lambda (errors)
;;                     (let ((errors (flycheck-sanitize-errors errors)))
;;                       (seq-map #'flycheck-flake8-fix-error-level errors)))
;;     :error-patterns
;;     ((warning line-start
;;               (file-name) ":" line ":" (optional column ":") " "
;;               (id (one-or-more (any alpha)) (one-or-more digit)) " "
;;               (message (one-or-more not-newline))
;;               line-end))
;;     :modes python-mode)

;;   (add-to-list 'flycheck-checkers 'python-ruff)
;;   (provide 'flycheck-ruff))
#+end_src

Enable ruff over tramp

#+begin_src emacs-lisp
;; (lsp-register-client
;;     (make-lsp-client
;;         :new-connection (lsp-tramp-connection "ruff-lsp")
;;         :activation-fn (lsp-activate-on "python")
;;         :major-modes '(python-mode)
;;         :remote? t
;;         :add-on? t
;;         :server-id 'ruff-lsp))
#+end_src

**** Pyright

#+begin_src emacs-lisp
(after! lsp-pyright
  (setq lsp-pyright-disable-language-services nil)
  (setq lsp-pyright-disable-organize-imports t)
  (setq lsp-pyright-auto-import-completions t)
  (setq lsp-pyright-auto-search-paths t)
  (setq lsp-pyright-diagnostic-mode "openFilesOnly")
  (setq lsp-pyright-log-level "info")
  (setq lsp-pyright-typechecking-mode "basic")
  (setq lsp-pyright-use-library-code-for-types t)
  (setq lsp-completion-enable t))
#+end_src

Enable pyright over tramp

#+begin_src emacs-lisp
;; (lsp-register-client
;;     (make-lsp-client
;;         :new-connection (lsp-tramp-connection "pyright")
;;         :activation-fn (lsp-activate-on "python")
;;         :major-modes '(python-mode)
;;         :remote? t
;;         :add-on? t
;;         :server-id 'pyright)
;;         :tramp-remote-path )
#+end_src

*** TODO Jupyter
Loading jupyter instead of emacs-jupyter

#+begin_src emacs-lisp
;; (use-package jupyter
;;   :after (ob-jupyter ob-python)
;;   :config
;;   (setq jupyter-api-authentication-method 'password)
;;   (setq jupyter-eval-use-overlays nil)
;;   (setq org-babel-default-header-args:jupyter-python '((:session . "/jpy:localhost#8888:py")
;;                                                        (:kernel . "conda-env-edge-py")
;;                                                        (:async . "yes")
;;                                                        (:pandoc t)))
;;   (add-to-list 'savehist-additional-variables 'jupyter-server-kernel-names)
;;   (setq ob-async-no-async-languages-alist '("jupyter-python"))
;;   (add-to-list 'org-structure-template-alist '("j" . "src jupyter-python")))

;; (advice-add 'request--netscape-cookie-parse :around #'fix-request-netscape-cookie-parse)

(after! ein
  (when (string= (system-name) "arch")
    (setq ein:jupyter-default-server-command "/home/dylanmorgan/.local/bin/jupyter-lab"))
  (when (string= (system-name) "maccie")
    (setq ein:jupyter-default-server-command "/opt/homebrew/bin/jupyter-lab")))
#+end_src

*** numpydoc

#+begin_src emacs-lisp
(use-package! numpydoc
  :after python
  :ensure t
  :config
  (map! :map python-mode-map
        :localleader
        :desc "numpydoc" "n" #'numpydoc-generate)
  ;; (setq numpydoc-template-long "")
  (setq numpydoc-insertion-style 'yas))
#+end_src

*** Poetry
Set keybindings for poetry and disable over tramp

#+begin_src emacs-lisp
(use-package! poetry
  :after python
  :hook (python-mode . (lambda ()
                         (interactive)
                         (if (file-remote-p default-directory)
                             (setq package-load-list '(all
                                                       (poetry nil))))))
  :config
  (map! :map python-mode-map
        :localleader
        :desc "poetry" "p" #'poetry))
#+end_src
** Rust 
*** Formatters and Linters

#+begin_src emacs-lisp
(after! rustic
   (setq rustic-format-on-save t)
   (setq rustic-lsp-server 'rust-analyzer))

;; (add-hook! 'rust-mode-hook #'prettify-symbols-mode)
#+end_src

*** DAP

#+begin_src emacs-lisp
(after! rustic
  (require 'dap-cpptools)
  (dap-register-debug-template "Rust::GDB Run Configuration"
                               (list :type "gdb"
                                     :request "launch"
                                     :name "GDB::Run"
                                     :gdbpath "rust-gdb"
                                     :target nil
                                     :cwd nil)))
#+end_src

* Org-mode
** Auto Tangle
Add ~#+auto_tange: t~ to the org header to automatically tangle when a document is saved

Also set a keybinding for this

#+begin_src emacs-lisp
(defun insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :map org-mode-map
      :after org
      :localleader
      :prefix ("j" . "org header")
      :desc "auto tangle tag"
      "a" 'insert-auto-tangle-tag)
#+end_src

** Agenda
Set filepath for org agenda

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Documents/org"))
#+end_src

*** TODO Super Agenda

(see [[https://tecosaur.github.io/emacs-config/config.html#transclusion][tecosaur's config]])

** TODO Babel
** Capture
Quickly take down notes

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Tasks" entry
         (file+headline "" "Inbox")
         "* TODO %?\n %U")
        ("c" "Phone Call" entry
         (file+headline "" "Inbox")
         "* TODO Call %?\n %U")
        ("m" "Meeting" entry
         (file+headline "" "Meetings")
         "* %?\n %U")))
#+end_src

** TODO Exporting
See [[https://tecosaur.github.io/emacs-config/config.html#exporting][tecosaur again]]

I like to export markdown files written in org as README.org. I'm creating a shortcut to use for this in future.

I also export a lot of org files to markdown so I will also add another shortcut for that command here.

#+begin_src emacs-lisp
(map! :map org-mode-map
      :after org
      :localleader
      :desc "org-export-to-org"
      "E" 'org-org-export-to-org
      :desc "org-export-as-md"
      "M" 'org-pandoc-export-to-markdown)
#+end_src

** File Conversions
Leaving org is sad. Thankfully, there's a way around this!
+ Package installed in packages.el

#+begin_src emacs-lisp
(use-package! org-pandoc-import
  :after org)
#+end_src

** File Headers
Provide different options for default headers for emacs org files

#+begin_src emacs-lisp
(defun org-literate-config ()
  (interactive)
  (setq title (read-string "Title: "))
  (setq filename (read-string "Original file name: "))
  (insert "#+TITLE: " title " \n"
          "#+AUTHOR: Dylan Morgan\n"
          "#+EMAIL: dbmorgan98@gmail.com\n"
          "#+PROPERTY: header-args :tangle " filename "\n"
          "#+STARTUP: content\n\n"
          "* Table of Contents :toc:\n\n"))

(defun org-header-notes ()
  (interactive)
  (setq title (read-string "Title: "))
  (insert "#+TITLE: " title " \n"
          "#+AUTHOR: Dylan Morgan\n"
          "#+EMAIL: dbmorgan98@gmail.com\n"
          "#+STARTUP: content\n\n"
          "* Table of Contents :toc:\n\n"))

(defun org-header-notes-custom-property ()
  (interactive)
  (setq title (read-string "Title: "))
  (setq properties (read-string "Properties: "))
  (insert "#+TITLE: " title " \n"
          "#+AUTHOR: Dylan Morgan\n"
          "#+EMAIL: dbmorgan98@gmail.com\n"
          "#+PROPERTY: " properties "\n"
          "#+STARTUP: content\n\n"
          "* Table of Contents :toc:\n\n"))

(defun org-header-with-readme ()
  (interactive)
  (setq title (read-string "Title: "))
  (insert "#+TITLE: " title " \n"
          "#+AUTHOR: Dylan Morgan\n"
          "#+EMAIL: dbmorgan98@gmail.com\n"
          "#+STARTUP: content\n"
          "#+EXPORT_FILE_NAME: ./README.org\n\n"
          "* Table of Contents :toc:\n\n"))

(map! :map org-mode-map
      :after org
      :localleader
      :prefix ("j" . "org header")
      :desc "literate config"
      "l" 'org-literate-config
      :desc "note taking"
      "n" 'org-header-notes
      :desc "notes custom property"
      "p" 'org-header-notes-custom-property
      :desc "header with readme"
      "r" 'org-header-with-readme)
#+end_src

** General
+ Default file location
  - If you use `org' and don't want your org files in the default location below,
    change `org-directory'. It must be set before org loads!

+ It's convenient to have properties inherited
+ Alphabetical lists
+ Export processes in external emacs process
+ Try to not accidentally do weird stuff in invisible regions

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"
      org-use-property-inheritance t
      org-list-allow-alphabetical t
      org-export-in-background t
      org-fold-catch-invisible-edits 'smart)
#+end_src

** Headings
Show all headings on opening an org file and assign numbers to those headings

#+begin_src emacs-lisp
(after! org
  (setq org-startup-folded 'content)
  (setq org-startup-numerated t))
#+end_src

Set plain list indents such that the bullet point style signifies the indentation level

#+begin_src emacs-lisp
(after! org
  (setq org-cycle-include-plain-lists 'integrate)
  (setq org-list-demote-modify-bullet '(("+" . "-")
                                        ("-" . "+")
                                        ("1." . "a.")
                                        ("1)" . "a)")))

  (setq org-list-use-circular-motion t)
  (setq org-list-allow-alphabetical t))
#+end_src

** Images
Automatically display images when opening an org file

#+begin_src emacs-lisp
(after! org
  (setq org-startup-with-inline-images t))
#+end_src

** Keybindings

Change some of the org keybinding

#+begin_src emacs-lisp
;; (defun org-insert-newline-heading ()
;;   ('newline)
;;   ('org-insert-heading))

;; (map! :map org-mode-map
;;       :after org
;;       :desc "Insert Heading"
;;       "M-<return>" 'org-insert-newline-heading)

(map! :map org-mode-map
      :after org
      :desc "Insert Heading"
      "M-<return>" 'org-insert-heading)
#+end_src

** LaTeX Fragments
*** CDLaTeX
Enable cdlatex by default and edit an environment after inserting one.

#+begin_src emacs-lisp
(after! org
  (setq org-startup-with-latex-preview t)
  (add-hook! 'org-mode-hook 'turn-on-org-cdlatex)

  (defadvice! org-edit-latex-emv-after-insert ()
    :after #'org-cdlatex-environment-indent
    (org-edit-latex-environment)))
#+end_src

*** TODO In-line Fragments
Use org-fragtog mode to automatically generate latex fragments
For some reason this doesn't work on my mac, so I will only enable this for my home computer

Change Latex fragment size

#+begin_src emacs-lisp
;; (when (string= (system-name) "arch")
;;   (add-hook! 'org-mode-hook #'org-fragtog-mode))

;; (defun update-org-latex-fragments ()
;;   (org-latex-preview '(64))
;;   (plist-put org-format-latex-options :background "Transparent" :scale 1.5 text-scale-mode-amount)
;;   (org-latex-preview '(16)))
;; (add-hook 'text-scale-mode-hook 'update-org-latex-fragments)

(after! org
  '(org-format-latex-options
    (quote
     (:foreground default :background default :scale 1.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1 :matchers
      ("begin" "$1" "$" "$$" "\\(" "\\[")))))
#+end_src

*** Prettier Highlighting
We want fragments to look lovely

#+begin_src emacs-lisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities))
  (require 'org-src)
  (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t))))
#+end_src

*** Prettier Rendering
Make LaTeX fragments look better in text

#+begin_src emacs-lisp
;; (setq org-format-latex-header "\\documentclass{article}
;; \\usepackage[usenames]{xcolor}

;; \\usepackage[T1]{fontenc}

;; \\usepackage{booktabs}

;; \\pagestyle{empty}             % do not remove
;; % The settings below are copied from fullpage.sty
;; \\setlength{\\textwidth}{\\paperwidth}
;; \\addtolength{\\textwidth}{-3cm}
;; \\setlength{\\oddsidemargin}{1.5cm}
;; \\addtolength{\\oddsidemargin}{-2.54cm}
;; \\setlength{\\evensidemargin}{\\oddsidemargin}
;; \\setlength{\\textheight}{\\paperheight}
;; \\addtolength{\\textheight}{-\\headheight}
;; \\addtolength{\\textheight}{-\\headsep}
;; \\addtolength{\\textheight}{-\\footskip}
;; \\addtolength{\\textheight}{-3cm}
;; \\setlength{\\topmargin}{1.5cm}
;; \\addtolength{\\topmargin}{-2.54cm}
;; % my custom stuff
;; \\usepackage{arev}
;; ")
#+end_src

Make background colour transparent

#+begin_src emacs-lisp
;; (setq org-format-latex-options
;;       (plist-put org-format-latex-options :background "Transparent"))
#+end_src

*** Scimax
Lets try this stuff from Scimax

#+begin_src emacs-lisp
(after! org
  (defun scimax-org-latex-fragment-justify (justification)
    "Justify the latex fragment at point with JUSTIFICATION.
JUSTIFICATION is a symbol for 'left, 'center or 'right."
    (interactive
     (list (intern-soft
            (completing-read "Justification (left): " '(left center right)
                             nil t nil nil 'left))))
    (let* ((ov (ov-at))
           (beg (ov-beg ov))
           (end (ov-end ov))
           (shift (- beg (line-beginning-position)))
           (img (overlay-get ov 'display))
           (img (and (and img (consp img) (eq (car img) 'image)
                          (image-type-available-p (plist-get (cdr img) :type)))
                     img))
           space-left offset)
      (when (and img
                 ;; This means the equation is at the start of the line
                 (= beg (line-beginning-position))
                 (or
                  (string= "" (s-trim (buffer-substring end (line-end-position))))
                  (eq 'latex-environment (car (org-element-context)))))
        (setq space-left (- (window-max-chars-per-line) (car (image-size img)))
              offset (floor (cond
                             ((eq justification 'center)
                              (- (/ space-left 2) shift))
                             ((eq justification 'right)
                              (- space-left shift))
                             (t
                              0))))
        (when (>= offset 0)
          (overlay-put ov 'before-string (make-string offset ?\ ))))))

  (defun scimax-org-latex-fragment-justify-advice ()
    "After advice function to justify fragments."
    (scimax-org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))

  (defun scimax-toggle-latex-fragment-justification ()
    "Toggle if LaTeX fragment justification options can be used."
    (interactive)
    (if (not (get 'scimax-org-latex-fragment-justify-advice 'enabled))
        (progn
          (advice-add 'org--format-latex-make-overlay :after 'scimax-org-latex-fragment-justify-advice)
          (put 'scimax-org-latex-fragment-justify-advice 'enabled t)
          (message "Latex fragment justification enabled"))
      (advice-remove 'org--format-latex-make-overlay 'scimax-org-latex-fragment-justify-advice)
      (put 'scimax-org-latex-fragment-justify-advice 'enabled nil)
      (message "Latex fragment justification disabled")))

  ;; Numbered equations all have (1) as the number for fragments with vanilla
  ;; org-mode. This code injects the correct numbers into the previews so they
  ;; look good.
  (defun scimax-org-renumber-environment (orig-func &rest args)
    "A function to inject numbers in LaTeX fragment previews."
    (let ((results '())
          (counter -1)
          (numberp))
      (setq results (cl-loop for (begin . env) in
                             (org-element-map (org-element-parse-buffer) 'latex-environment
                               (lambda (env)
                                 (cons
                                  (org-element-property :begin env)
                                  (org-element-property :value env))))
                             collect
                             (cond
                              ((and (string-match "\\\\begin{equation}" env)
                                    (not (string-match "\\\\tag{" env)))
                               (cl-incf counter)
                               (cons begin counter))
                              ((string-match "\\\\begin{align}" env)
                               (prog2
                                   (cl-incf counter)
                                   (cons begin counter)
                                 (with-temp-buffer
                                   (insert env)
                                   (goto-char (point-min))
                                   ;; \\ is used for a new line. Each one leads to a number
                                   (cl-incf counter (count-matches "\\\\$"))
                                   ;; unless there are nonumbers.
                                   (goto-char (point-min))
                                   (cl-decf counter (count-matches "\\nonumber")))))
                              (t
                               (cons begin nil)))))

      (when (setq numberp (cdr (assoc (point) results)))
        (setf (car args)
              (concat
               (format "\\setcounter{equation}{%s}\n" numberp)
               (car args)))))

    (apply orig-func args))


  (defun scimax-toggle-latex-equation-numbering ()
    "Toggle whether LaTeX fragments are numbered."
    (interactive)
    (if (not (get 'scimax-org-renumber-environment 'enabled))
        (progn
          (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
          (put 'scimax-org-renumber-environment 'enabled t)
          (message "Latex numbering enabled"))
      (advice-remove 'org-create-formula-image #'scimax-org-renumber-environment)
      (put 'scimax-org-renumber-environment 'enabled nil)
      (message "Latex numbering disabled.")))

  (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
  (put 'scimax-org-renumber-environment 'enabled t))
#+end_src

** Presentations
*** Tree Slides
It is possible to give presentations in org-mode using org-tree-slide

#+begin_src emacs-lisp
(use-package! org-tree-slide
  :after org
  :config
  (setq org-image-actual-width nil))
#+end_src

*** TODO Org Present
For more advanced functionality, we can also make presentations using org-present

#+begin_src emacs-lisp
(defun my/org-present-prepare-slide (buffer-name heading)
  (org-overview)  ; Show only top-level headlines
  (org-show-entry)  ; Unfold the current entry
  (org-show-children))  ; Show only direct subheadings of the slide but don't expand them

(defun mu/org-present-start ()
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))

  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")

  ;; Display inline images automatically
  (org-display-inline-images)

  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (setq-local face-remapping-alist '((default variable-pitch default)))

  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)

  ;; Stop displaying inline images
  (org-remove-inline-images)

  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

(use-package! org-present
  :hook
  (org-mode-hook . variable-pitch-mode)
  (org-present-mode-hook . my/org-present-start)
  (org-present-mode-quit-hook . my/org-present-end)
  (org-present-after-navigate-functions . my/org-present-prepare-slide)
  :config
  ;; Set reusable font name variables
  (defvar my/fixed-width-font "FiraCode Nerd Font"
    "The font to use for monospaced (fixed width) text.")
  (defvar my/variable-width-font "Iosevka Aile"
    "The font to use for variable-pitch (document) text.")

  (set-face-attribute 'default nil :font my/fixed-width-font :weight 'light :height 180)
  (set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'light :height 190)
  (set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'light :height 1.3)

  ;; Load org-faces to make sure we can set appropriate faces
  (require 'org-faces)

  ;; Resize Org headings
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font my/variable-width-font :weight 'medium :height (cdr face)))

  ;; Make the document title a bit bigger
  (set-face-attribute 'org-document-title nil :font my/variable-width-font :weight 'bold :height 1.3)

  ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Configure fill width
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))
#+end_src

** Prettification
*** Emphasis Markers
We don't want to see underscores and asterisks when writing italic and bold
text.

#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src

Show LaTeX fragments when moving over them

#+begin_src emacs-lisp
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t
        org-appear-autokeywords t))
#+end_src


*** Pretty Mode
Make all the things look pretty

#+begin_src emacs-lisp
(after! org
  (setq org-pretty-entities t)
  (setq +org-pretty-mode t))
#+end_src

** TODO Preview
Live preview org files in github-flavoured markdown

#+begin_src emacs-lisp
(eval-after-load "org"
  '(require 'ox-gfm nil t))
#+end_src

** TODO Roam
Need to do this (see [[https://tecosaur.github.io/emacs-config/config.html#transclusion][tecosaur's config]])

#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory "~/Documents/org/roam")
  (org-roam-db-autosync-mode))
#+end_src

org-roam-ui

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org
    ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;; a hookable mode anymore, you're advised to pick something yourself
    ;; if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** TODO Snippet Helpers
Typing out src block headers all the time is a pain

#+begin_src emacs-lisp
(after! org
  (defun +yas/org-src-header-p ()
    "Determine whether `point' is within a src-block header or header-args."
    (pcase (org-element-type (org-element-context))
      ('src-block (< (point) ; before code part of the src-block
                     (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                     (forward-line 1)
                                     (point))))
      ('inline-src-block (< (point) ; before code part of the inline-src-block
                            (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                            (search-forward "]{")
                                            (point))))
      ('keyword (string-match-p "^header-args" (org-element-property :value (org-element-context))))))

  (defun +yas/org-prompt-header-arg (arg question values)
    "Prompt the user to set ARG header property to one of VALUES with QUESTION.
  The default value is identified and indicated. If either default is selected,
  or no selection is made: nil is returned."
    (let* ((src-block-p (not (looking-back "^#\\+property:[ \t]+header-args:.*" (line-beginning-position))))
           (default
             (or
              (cdr (assoc arg
                          (if src-block-p
                              (nth 2 (org-babel-get-src-block-info t))
                            (org-babel-merge-params
                             org-babel-default-header-args
                             (let ((lang-headers
                                    (intern (concat "org-babel-default-header-args:"
                                                    (+yas/org-src-lang)))))
                               (when (boundp lang-headers) (eval lang-headers t)))))))
              ""))
           default-value)
      (setq values (mapcar
                    (lambda (value)
                      (if (string-match-p (regexp-quote value) default)
                          (setq default-value
                                (concat value " "
                                        (propertize "(default)" 'face 'font-lock-doc-face)))
                        value))
                    values))
      (let ((selection (consult--read question values :default default-value)))
        (unless (or (string-match-p "(default)$" selection)
                    (string= "" selection))
          selection))))

  (defun +yas/org-src-lang ()
    "Try to find the current language of the src/header at `point'. Return nil otherwise."
    (let ((context (org-element-context)))
      (pcase (org-element-type context)
        ('src-block (org-element-property :language context))
        ('inline-src-block (org-element-property :language context))
        ('keyword (when (string-match "^header-args:\\([^ ]+\\)" (org-element-property :value context))
                    (match-string 1 (org-element-property :value context)))))))

  (defun +yas/org-last-src-lang ()
    "Return the language of the last src-block, if it exists."
    (save-excursion
      (beginning-of-line)
      (when (re-search-backward "^[ \t]*#\\+begin_src" nil t)
        (org-element-property :language (org-element-context)))))

  (defun +yas/org-most-common-no-property-lang ()
    "Find the lang with the most source blocks that has no global header-args, else nil."
    (let (src-langs header-langs)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "^[ \t]*#\\+begin_src" nil t)
          (push (+yas/org-src-lang) src-langs))
        (goto-char (point-min))
        (while (re-search-forward "^[ \t]*#\\+property: +header-args" nil t)
          (push (+yas/org-src-lang) header-langs)))

      (setq src-langs
            (mapcar #'car
                    ;; sort alist by frequency (desc.)
                    (sort
                     ;; generate alist with form (value . frequency)
                     (cl-loop for (n . m) in (seq-group-by #'identity src-langs)
                              collect (cons n (length m)))
                     (lambda (a b) (> (cdr a) (cdr b))))))

      (car (cl-set-difference src-langs header-langs :test #'string=))))

  (defun org-syntax-convert-keyword-case-to-lower ()
    "Convert all #+KEYWORDS to #+keywords."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((count 0)
            (case-fold-search nil))
        (while (re-search-forward "^[ \t]*#\\+[A-Z_]+" nil t)
          (unless (s-matches-p "RESULTS" (match-string 0))
            (replace-match (downcase (match-string 0)) t)
            (setq count (1+ count))))
        (message "Replaced %d occurances" count))))

  (defun org-auto-file-export ()
    "Export to file if #+export_file_name is found in org file metadata"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]*#\\+export_file_name:*" nil t)
      ;; (while (re-search-forward "*export_file_name:*" nil t)
        (setq org_export_fname (org-org-export-to-org))
        (message "Exported org file %s" org_export_fname))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook #'org-syntax-convert-keyword-case-to-lower nil 'make-it-local)
              (add-hook 'after-save-hook #'org-auto-file-export nil 'make-it-local))))
#+end_src

** TODO SRC Blocks
+ Use python code blocks in org mode (as well as some other languages thrown in)
+ Don't require :results output as a header in python SRC blocks
+ Formatting for source code blocks

#+begin_src emacs-lisp
(after! org
  (require 'ob-emacs-lisp)
  (require 'ob-fortran)
  (require 'ob-julia)
  (require 'ob-latex)
  (require 'ob-lua)
  (require 'ob-python)
  (require 'ob-shell)

  (setq org-babel-default-header-args
        (cons '(:results . "output")
              (assq-delete-all :results org-babel-default-header-args)))

  (setq org-src-fontify-natively t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t))
#+end_src

Specify shortcuts for src blocks with specific languages (not working)

#+begin_src emacs-lisp
;; (after! org
;;   (setq org-structure-template-alist
;;         '(("lsp" . "#begin_src emacs-lisp\n?\n#+end_src")
;;           ("f90" . "#begin_src f90\n?\n#+end_src")
;;           ("f" . "#begin_src fortran\n?\n#+end_src")
;;           ("jl" . "#begin_src julia\n?\n#+end_src")
;;           ("tex" . "#begin_src latex\n?\n#+end_src")
;;           ("lua" . "#begin_src lua\n?\n#+end_src")
;;           ("py" . "#begin_src python\n?\n#+end_src")
;;           ("sh" . "#begin_src shell\n?\n#+end_src"))))
#+end_src

Support lsp in SRC blocks (not working)

#+begin_src emacs-lisp
;; (cl-defmacro lsp-org-babel-enable (lang)
;;   "Support LANG in org source code block."
;;   (setq centaur-lsp 'lsp-mode)
;;   (cl-check-type lang stringp)
;;   (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
;;          (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
;;     `(progn
;;        (defun ,intern-pre (info)
;;          (let ((file-name (->> info caddr (alist-get :file))))
;;            (unless file-name
;;              (setq file-name (make-temp-file "babel-lsp-")))
;;            (setq buffer-file-name file-name)
;;            (lsp-deferred)))
;;        (put ',intern-pre 'function-documentation
;;             (format "Enable lsp-mode in the buffer of org source block (%s)."
;;                     (upcase ,lang)))
;;        (if (fboundp ',edit-pre)
;;            (advice-add ',edit-pre :after ',intern-pre)
;;          (progn
;;            (defun ,edit-pre (info)
;;              (,intern-pre info))
;;            (put ',edit-pre 'function-documentation
;;                 (format "Prepare local buffer environment for org source block (%s)."
;;                         (upcase ,lang))))))))
;; (defvar org-babel-lang-list
;;   '("python" "ipython" "bash" "sh" "emacs-lisp" "fortran" "f90" "julia" "shell" "lua" "latex"))
;; (dolist (lang org-babel-lang-list)
;;   (eval `(lsp-org-babel-enable ,lang)))

;; (defun org-babel-edit-prep:python (babel-info)
;;   (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
;;   (lsp))
#+end_src

** Table of Contents
Generate a table of contents and set a shortcut

#+begin_src emacs-lisp
(use-package! toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

(after! org
  (defun add-toc ()
    (interactive)
    (insert "* Table of Contents :toc:\n\n"))

  (map! :map org-mode-map
        :after org
        :localleader
        :prefix ("C" . "insert toc")
        :desc "insert-toc"
        "C" #'add-toc))
#+end_src

** 'TODO's
Automatically log when a 'TODO' is marked as completed

#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time)
  (setq org-closed-keep-when-no-todo 'non-nil))
#+end_src

* Shells
** TODO vterm
This is basically just like opening a fish shell in a buffer in emacs

#+begin_src emacs-lisp
;; (defun custom-vterm-popup ()
;;   (if (window-dedicated-p nil)
;;       (message "yep")
;;     (message "nope")))

;; (map! :leader
;;       :desc "Custom vterm popup" "o t" #'custom-vterm-popup)

(use-package! vterm
  :after vterm
  :init
  :config
  (setq vterm-kill-buffer-on-exit t
        vterm-always-compile-module t
        vterm-ignore-blink-cursor nil))
#+end_src

** eshell
*** STRT General
Taken from Derek Taylor's [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.emacs.d.gnu/config.org#shells][Gitlab page]].

Eshell is an emacs 'shell' written in elisp.

+ ~eshell-syntax-highlighting~ â€“ adds fish/zsh-like syntax highlighting.
+ ~eshell-rc-script~ â€“ your profile for eshell; like a bashrc for eshell.
+ ~eshell-aliases-file~ â€“ sets an aliases file for the eshell.

#+begin_src emacs-lisp
(use-package! eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1)
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("fish" "htop" "ssh" "top" "zsh")))
#+end_src

Automatically close the command buffer on exit

#+begin_src emacs-lisp
(after! eshell
  (setq eshell-destroy-buffer-when-process-dies t))
#+end_src

*** Fish Completions
This package extends the pcomplete completion framework with completion from the fish shell. The fish shell has smart completion for a wide range of programs. fish does not require any special configuration to work with this package. Eshell, which uses pcomplete for completion, can be made to fall back on fish when it does not find any completion candidate with its native completion support. M-x shell can be made to use fish. This will disable the underlying shell completion.

#+begin_src emacs-lisp
;; (when (and (executable-find "fish")
;;            (require 'fish-completion nil t))
;;   (global-fish-completion-mode))
#+end_src

The condition will prevent the package from loading if fish is not found (change the executable name according to you local installation. Alternatively, you can simply load the package with (require 'fish-completion) and call fish-completion-mode manually. Optionally, if the package bash-completion is installed, fish-completion-complete can be configured to fall back on bash to further try completing.  See fish-completion-fallback-on-bash-p.

** Prompt
Fancier prompt:

Edit: I actually don't like this, but will just keep it around for now.

#+begin_src emacs-lisp
;; (defun with-face (str &rest face-plist)
;;    (propertize str 'face face-plist))

;;  (defun shk-eshell-prompt ()
;;    (let ((header-bg "#fff"))
;;      (concat
;;       (with-face (concat (eshell/pwd) " ") :background header-bg)
;;       (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
;;       (with-face
;;        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
;;        :background header-bg)
;;       (with-face "\n" :background header-bg)
;;       (with-face user-login-name :foreground "blue")
;;       "@"
;;       (with-face "localhost" :foreground "green")
;;       (if (= (user-uid) 0)
;;           (with-face " #" :foreground "red")
;;         " $")
;;       " ")))
;;  (setq eshell-prompt-function 'shk-eshell-prompt)
;;  (setq eshell-highlight-prompt nil)
#+end_src

* Help
Here are some additional functions/macros that could help you configure Doom:

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.
